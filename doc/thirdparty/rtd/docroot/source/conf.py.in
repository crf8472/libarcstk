# -*- coding: utf-8 -*-

# Libarcstk configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html



# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
#import os
#import sys

## Add modules installed in python-sandbox
#sys.path.insert(0, os.path.abspath('@ENV_DIRECTORY@/bin/'))

import lxml.etree as ET



# -- Project information -----------------------------------------------------

project = '@PROJECT_NAME@'
copyright = '2019, tristero'
author = 'tristero'

# The full version, including alpha/beta/rc tags
release = '@PROJECT_VERSION_STRING@'



# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.imgmath',
    #'sphinx.ext.mathjax',
    'sphinx.ext.todo',
    'breathe',
    'exhale'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []



# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']



# -- Breathe -----------------------------------------------------------------

breathe_projects = { "@PROJECT_NAME@": "@DOXYGEN_OUTPUT_DIRECTORY@/xml" }

breathe_default_project = "@PROJECT_NAME@"



# -- Exhale ------------------------------------------------------------------

# Setup the exhale extension
exhale_args = {
    # These arguments are required
    "containmentFolder":     "./api",
    "rootFileName":          "library_root.rst",
    "rootFileTitle":         "@PROJECT_NAME@ API",
    "doxygenStripFromPath":  "@PROJECT_INCLUDE_DIR@",
    #"doxygenStripFromPath":  "../../../include", ## MUST match Doxyfile's STRIP_FROM_PATH
    # Suggested optional arguments
    "createTreeView":        True,
    # TIP: if using the sphinx-bootstrap-theme, you need
    # "treeViewIsBootstrap": True,
    "exhaleExecutesDoxygen": @EXHALE_EXECUTES_DOXYGEN@,
    "exhaleUseDoxyfile":     @EXHALE_EXECUTES_DOXYGEN@
    #"exhaleDoxygenStdin":    "INPUT = @PROJECT_INCLUDE_DIR@"
}



# -- Language settings -------------------------------------------------------

# Tell sphinx what the primary language being documented is.
primary_domain = 'cpp'

# Tell sphinx what the pygments highlight language should be.
highlight_language = 'cpp'



# -- Custom functionality ----------------------------------------------------

def xsl_transform(inDoc, xslFile, outDoc):
    doc = ET.parse(inDoc)
    xslt = ET.parse(xslFile)
    transform = ET.XSLT(xslt)
    transformed_doc = transform(doc)
    with open(outDoc, 'w') as f:
        print(transformed_doc, file=f)
    return


def doxy_deduplicate_index(filename):
    xsl_transform(filename,
            '@PROJECT_DOC_DIR@/thirdparty/doxygen/dedup_index.xsl', filename)
    print('Deduplicate <compound> elements in index.xml')


def setup(app):
    if not exhale_args['exhaleExecutesDoxygen'] and '@DOXYGEN_XML_NEEDS_DEDUP@' == 'YES':
        doxy_deduplicate_index('@OUTPUT_INDEX@')
    return

